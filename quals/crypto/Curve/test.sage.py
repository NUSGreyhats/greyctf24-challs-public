

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6)
from param import p, b, n # bn curve

F1 = GF(p)
F2 = GF(p**_sage_const_2 , names=('u',)); (u,) = F2._first_ngens(1)

while True:
    t = F2.random_element()
    if (t**((p**_sage_const_2  - _sage_const_1 )/_sage_const_3 ) != _sage_const_1  and t**((p**_sage_const_2  - _sage_const_1 )/_sage_const_2 ) != _sage_const_1 ):
        break

E1 = EllipticCurve(GF(p), [_sage_const_0 , b])
E2 = EllipticCurve(F2, [_sage_const_0 , b / t])

print(t)

h = _sage_const_2  * p - n

P = E1.random_point()
Q = h * E2.random_point()

G = F2['x']; (x,) = G._first_ngens(1)
F3 = F2.extension(x**_sage_const_6  - t, names=('v',)); (v,) = F3._first_ngens(1)

print(E2.cardinality() == h * n)

print(n * P)
print(n * Q)
print(E2.cardinality() * Q)

E3 = EllipticCurve(F3, [_sage_const_0 , b])

P = E3(P)
Q = E3(v**_sage_const_2  * Q[_sage_const_0 ] , v**_sage_const_3  * Q[_sage_const_1 ])


print((P).tate_pairing(_sage_const_6  * Q, Integer(n), _sage_const_6 ) == (_sage_const_3  * P).tate_pairing(_sage_const_2  * Q, Integer(n), _sage_const_6 ))

