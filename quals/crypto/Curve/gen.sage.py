

# This file was *autogenerated* from the file gen.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_36 = Integer(36); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_24 = Integer(24); _sage_const_6 = Integer(6); _sage_const_18 = Integer(18); _sage_const_128 = Integer(128)
from sage.libs.libecm import ecmfactor

class BN(object):
    @staticmethod
    def generate_prime_order(zbits):
        while True:
            z = randint(_sage_const_2 **(zbits - _sage_const_1 ), _sage_const_2 **zbits)
            pz = int(BN.p(z))
            if not is_prime(pz):
                continue
            rz = int(BN.r(z))
            if not is_prime(rz):
                continue
            break
        K = GF(pz)
        b = _sage_const_1 
        while True:
            curve = EllipticCurve(K, [_sage_const_0 , b])
            card = curve.cardinality()
            if card % rz == _sage_const_0 :
                print(rz)
                break
            b += _sage_const_1 
        return curve

    @staticmethod
    def p(z):
        return _sage_const_36  * z**_sage_const_4  + _sage_const_36  * z**_sage_const_3  + _sage_const_24  * z**_sage_const_2  + _sage_const_6  * z + _sage_const_1 
    @staticmethod
    def r(z):
        return _sage_const_36  * z**_sage_const_4  + _sage_const_36  * z**_sage_const_3  + _sage_const_18  * z**_sage_const_2  + _sage_const_6  * z + _sage_const_1 
    @staticmethod
    def t(z):
        return _sage_const_6  * z**_sage_const_2  + _sage_const_1 
    @staticmethod
    def s(z):
        return _sage_const_6  * z**_sage_const_2  + _sage_const_6  * z + _sage_const_1 


print(BN.generate_prime_order(_sage_const_128 ))

