

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5000 = Integer(5000); _sage_const_16288504871510480794324762135579703649765856535591342922567026227471362965149586884658054200933438380903297812918052138867605188042574409051996196359653039 = Integer(16288504871510480794324762135579703649765856535591342922567026227471362965149586884658054200933438380903297812918052138867605188042574409051996196359653039); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_9999 = Integer(9999); _sage_const_0 = Integer(0); _sage_const_600 = Integer(600); _sage_const_40 = Integer(40)
from pwn import *
from gmpy2 import mpz, ceil
import gmpy2

from Crypto.Util.number import inverse

gmpy2.get_context().precision = int(_sage_const_5000 )

p = _sage_const_16288504871510480794324762135579703649765856535591342922567026227471362965149586884658054200933438380903297812918052138867605188042574409051996196359653039 
q = (p - _sage_const_1 ) // _sage_const_2 

query_g = _sage_const_2 
while True:
    if (pow(query_g, q, p) != _sage_const_1 ):
        break
    query_g += _sage_const_1 

inv_2 = inverse(_sage_const_2 , q)
n = _sage_const_5 

r = remote("localhost", int(_sage_const_9999 ))

r.recvuntil("g: ")
g = int(r.recvline().strip().decode())

r.recvuntil("mpk: ")
mpk = eval(r.recvline().strip().decode())

msk = []

for i in range(n):
    mrange = [_sage_const_0 , q]
    k = mpz(_sage_const_0 )
    for j in range(_sage_const_1 , _sage_const_600 ):
        t = pow(_sage_const_2 , j, q)
        r.sendline("2")
        payload = [_sage_const_0 ] * n
        payload[i] = t
        r.sendline(" ".join(map(str, payload)))
        r.sendline(str(query_g))
        r.recvuntil("s_k:")
        sk = int(r.recvline().strip().decode())
        if (pow(sk, q, p) != _sage_const_1 ):
            k += _sage_const_1 
        mrange[_sage_const_1 ] = min(mrange[_sage_const_1 ], ceil((k + _sage_const_1 ) * q / (_sage_const_2  ** j)))
        mrange[_sage_const_0 ] = max(mrange[_sage_const_0 ], k * q // (_sage_const_2  ** j))
        k *= _sage_const_2 
    msk.append(mrange[_sage_const_0 ] + _sage_const_1 )

r.sendline("3")
r.recvuntil("g_r: ")
g_r = int(r.recvline().strip().decode())
r.recvuntil("c: ")
c = eval(r.recvline().strip().decode())

ans = []

for i in range(n):
    A = GF(p)(c[i] * inverse(pow(g_r, msk[i], p), p))
    b = GF(p)(g)
    ans.append(int(discrete_log(A, b, bounds=[_sage_const_0 , _sage_const_2 **_sage_const_40  + _sage_const_1 ], algorithm='lambda')))
               
r.sendline(" ".join(map(str, ans)))
r.interactive()
    

