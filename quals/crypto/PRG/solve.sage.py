

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_9999 = Integer(9999); _sage_const_2 = Integer(2); _sage_const_192 = Integer(192); _sage_const_64 = Integer(64); _sage_const_128 = Integer(128); _sage_const_10 = Integer(10); _sage_const_100 = Integer(100); _sage_const_8 = Integer(8); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1)
from pwn import *
from param import A 

def bytes_to_bits(s):
    return list(map(int, ''.join(format(x, '08b') for x in s)))

remo = remote("localhost", int(_sage_const_9999 ))

F = PolynomialRing(GF(_sage_const_2 ), _sage_const_192 , 'x')

variables = F.gens()

r = vector(F, variables[_sage_const_64 :_sage_const_128 ])
k = vector(F, variables[_sage_const_128 :])

A = Matrix(F, A)

length = _sage_const_10 

for _ in range(_sage_const_100 ):
    x = vector(F, variables[:_sage_const_64 ])
    equations = []
    remo.recvuntil("Game ")
    remo.recvuntil("\n")
    remo.recvuntil("Output: ")
    output = bytes.fromhex(remo.recvuntil("\n").strip().decode())
    output = bytes_to_bits(output)
    for i in range(length * _sage_const_8 ):
        t = _sage_const_0 
        for oo in range(_sage_const_64 ):
            t += x[oo]
        equations.append(t - output[i])
        if (i % _sage_const_3  == _sage_const_0 ): x = (A * x + r)
        if (i % _sage_const_3  == _sage_const_1 ): x = (A * x + k)
        if (i % _sage_const_3  == _sage_const_2 ): x = (A * x + r + k)

    equations = Ideal(equations).groebner_basis()
    if (len(equations) == _sage_const_1 ):
        remo.sendline("0")
    else:
        remo.sendline("1")
    

