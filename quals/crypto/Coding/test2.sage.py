

# This file was *autogenerated* from the file test2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1000 = Integer(1000); _sage_const_2 = Integer(2); _sage_const_0p1 = RealNumber('0.1'); _sage_const_0 = Integer(0); _sage_const_100 = Integer(100); _sage_const_1 = Integer(1)
from secrets import randbelow
import numpy as np
from ldpc import bp_decoder, code_util
import random

n = _sage_const_1000 
k = int(n * _sage_const_2 )

print(n, k)
threshold = _sage_const_0p1 

G = [[randbelow(_sage_const_2 ) for _ in range(k)] for i in range(n)]
G = Matrix(GF(_sage_const_2 ), G)
C = LinearCode(G)

m = [randbelow(_sage_const_2 ) for _ in range(n)]
m = vector(GF(_sage_const_2 ), m)

original = m * G 

noise = [_sage_const_0  for _ in range(k)]

for i in range(k):
    if (randbelow(_sage_const_100 ) / _sage_const_100 ) < threshold:
        noise[i] = _sage_const_1 

print(sum(noise))
noise = vector(GF(_sage_const_2 ), noise)

encoded = original + noise

bpd=bp_decoder(
    C.parity_check_matrix().change_ring(ZZ).LLL().change_ring(GF(_sage_const_2 )).numpy(dtype=int), #the parity check matrix
    error_rate=_sage_const_0p1 , # the error rate on each bit
    max_iter=_sage_const_1000 , #the maximum iteration depth for BP
    bp_method="product_sum", #BP method. The other option is `minimum_sum'
    channel_probs=[None] #channel probability probabilities. Will overide error rate.
)

decoded_codeword=bpd.decode(encoded.numpy(dtype=int))
print(k - sum(original == decoded_codeword))

