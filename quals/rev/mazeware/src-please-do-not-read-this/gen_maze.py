from Crypto.Util.number import long_to_bytes

def pad(num):
    return bin(num)[2:].zfill(8)

def parse(maze):
    rows = [i for i in maze.split("\n") if i]
    height = len(rows)
    width = len(rows[0])
    for i in range(len(rows)):
        if "^" in rows[i]:
            player = (rows[i].index("^"), i)
        if "F" in rows[i]:
            flag = (rows[i].index("F"), i)

    maze = maze.replace("\n", "").replace("^", " ").replace("F", " ").replace("#", "1").replace(" ", "0")
    maze = pad(flag[1]) + pad(player[1]) + pad(flag[0]) + pad(player[0]) + pad(width) + pad(height) + maze
    maze = [maze[i:i+8] for i in range(0, len(maze), 8)]
    maze[-1] = maze[-1].ljust(8, "0")
    print(len(maze))
    print(", ".join([hex(int(i, 2)) for i in maze]))
    # return long_to_bytes(int(maze, 2))

maze = """
#################
# ^             #
#               #
#               #
#         #######
#         #     #
#         #  F  #
#         #     #
#################
"""

parse(maze)

maze = """
###########
#^#       #
# ### # ###
# #   #   #
# ### ### #
#      #F #
###########
"""
parse(maze)

maze = """
#########################################
#  ^# #   #   # # #         #   #   #   #
# ### # # ### # # ### # # ### ##### # # #
#       # #   #       # #       #     # #
# # ### ### # # ##### ### ### # # # # ###
# #   # # # # # #       #   # # # # #   #
# ####### ### ##### ######### ######### #
#       #       # #     # #         #   #
### ####### ##### # # ### # ####### # # #
# #   #   #     # # #   # # # #       # #
# ### # # # # # # ##### # # # # #########
#     # #   # # # # #   # # # # #   #   #
# # # ##### # ### # # # # # # # # ### # #
# # #   #   # #       # # # #   #   # # #
# ####### ##### # # # ### ##### # ### ###
# #       # #   # # #   #   #     # #   #
# # ### ### # # # ### # # ### ### # ### #
#   # #       # #   # # #   #   # # # # #
# ### ####### # ####### # ### # # # # # #
# # #   #     #       # #     # #       #
### # # # ########### ### ####### # ### #
#     # #   # #   # # # #       # #   # #
### # ### ### ### # # # # ### # ##### ###
#   #             #   #     # #     #  F#
#########################################
"""
parse(maze)

maze = """
#########################################
#      ^# #   #     #   #         #     #
# ####### # ### ##### # # # # # ### ### #
#     #   #   #   #   #   # # # # #   #F#
# # ### # # ### ##### ### ####### # #####
# # # # # #     #   # #   #         #   #
# # # # ### ### # ### ### # ########### #
# #     #     #     #   # # #       # # #
##### ####### # ### ### ### ##### # # # #
#       #     # #         # # # # #     #
# ####### # ##### ######### # # # ### ###
#     #   # #   #     # #       # # # #F#
# ### ####### ##### ### # # ####### # # #
# #   #   #     # # # #   #   #   #   # #
# # # ### ### ### # # ### ### # ### ### #
# # #   #   #   # #   # #   #     #   # #
# ### ### ##### # ### # # ##### ### ### #
# # #       #     #     #   #     #   # #
# # # ### # ### # # ### ### ### ### ### #
# #     # #     #     #     #           #
#########################################
"""

parse(maze)

# print("".join([f"0x{i}, " for i in parse(maze).hex(' ', 1).split()]))

FINAL_MAZE = """
##################
#   ##   #   ##F##
# # #  #   #  #  #
# #^# ####### ## #
# ### ##    #    #
#   # ## ## ######
### # ## #  #    #
#   #    # ## ## #
# ########    #  #
#  #    ####### ##
##   ##         ##
##################
""".replace("\n", "").replace("#", "11").replace("^", "01").replace("F", "10").replace(" ", "00")
print(FINAL_MAZE)

finale = hex(int(FINAL_MAZE, 2))[2:]
print("\npush rcx\nmovabs rcx, 0x".join([finale[i:i+8] for i in range(0, len(finale), 8)][::-1]))


